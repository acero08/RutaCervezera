openapi: 3.0.0
info:
  title: Bar Management API
  version: 1.0.0
  description: API para gestión de bares, productos, reseñas y usuarios

tags:
  - name: Bars
    description: Operaciones con bares
  - name: Items
    description: Gestión de productos (comida y bebida)
  - name: Reviews
    description: Operaciones con reseñas
  - name: Upvotes
    description: Sistema de votos
  - name: Users
    description: Gestión de usuarios
  - name: Comments
    description: Gestión de comentarios
  - name: YELP
    description: Cosas de api yelp
  - name: Events
    description: Operaciones con eventos
  - name: Business
    description: Operaciones de gestión de negocio

paths:
  # Users endpoints (existing)
  /users/register:
    post:
      tags: [Users]
      summary: Registrar nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Juan Pérez"
                email:
                  type: string
                  format: email
                  example: "juan@example.com"
                mobile:
                  type: string
                  example: "+34 600 123 456"
                password:
                  type: string
                  example: "Password123!"
              required:
                - name
                - email
                - mobile
                - password
      responses:
        '201':
          description: Usuario registrado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Usuario registrado exitosamente"
                  data:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: 5f8d04b3ab34567890abcdef
                      name:
                        type: string
                      email:
                        type: string
                      mobile:
                        type: string
                      createdAt:
                        type: string
                        format: date-time
        '400':
          description: Campos requeridos faltantes
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Todos los campos son requeridos"
        '409':
          description: Usuario ya existe
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "El usuario ya existe"

  /users/login:
    post:
      tags: [Users]
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "juan@example.com"
                password:
                  type: string
                  example: "Password123!"
              required:
                - email
                - password
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: "Login exitoso"
                  token:
                    type: string
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                  user:
                    type: object
                    properties:
                      id:
                        type: string
                        example: 5f8d04b3ab34567890abcdef
                      name:
                        type: string
                        example: "Juan Pérez"
                      email:
                        type: string
                        example: "juan@example.com"
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          description: Credenciales inválidas
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Credenciales inválidas"
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Usuario no encontrado"

  /api/userdata:
    post:
      tags: [Users]
      summary: Obtener datos del usuario autenticado
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
              required:
                - token
      responses:
        '200':
          description: Datos del usuario
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "Ok"
                  data:
                    $ref: '#/components/schemas/UserDetail'
        '401':
          description: Token inválido
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: "Token inválido"

  /api/updateUser:
    put:
      tags: [Users]
      summary: Actualizar datos de usuario
      consumes:
        - multipart/form-data
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                name:
                  type: string
                  example: "Juan Pérez Actualizado"
                mobile:
                  type: string
                  example: "+34 600 000 000"
                gender:
                  type: string
                  example: "masculino"
                password:
                  type: string
                  example: "NewPassword123!"
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Usuario actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "ok"
                  message:
                    type: string
                    example: "User updated successfully"
                  user:
                    $ref: '#/components/schemas/UserDetail'
        '401':
          description: No autorizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "Unauthorized"
        '404':
          description: Usuario no encontrado
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: "error"
                  message:
                    type: string
                    example: "User not found"

  # Bars endpoints
  /api/bars:
    post:
      tags: [Bars]
      summary: Crear un nuevo bar
      consumes:
        - multipart/form-data
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Bar Ejemplo"
                address:
                  type: string
                  example: "Calle Falsa 123"
                phonenumber:
                  type: string
                  example: "+34 600 123 456"
                rating:
                  type: number
                  example: 4.5
                image:
                  type: string
                  format: binary
              required:
                - name
                - address
                - phonenumber
                - rating
      responses:
        '201':
          description: Bar creado exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bar creado exitosamente"
                  bar:
                    $ref: '#/components/schemas/Bar'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags: [Bars]
      summary: Obtener todos los bares
      responses:
        '200':
          description: Lista de bares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bar'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/bars/search:
    get:
      tags: [Bars]
      summary: Buscar bares por nombre
      parameters:
        - in: query
          name: name
          schema:
            type: string
          required: true
          example: "Ejemplo"
      responses:
        '200':
          description: Bares encontrados
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Bar'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/bars/{id}:
    get:
      tags: [Bars]
      summary: Obtener bar por ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 5f8d04b3ab34567890abcdef
      responses:
        '200':
          description: Bar encontrado
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Bar'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    put:
      tags: [Bars]
      summary: Actualizar bar por ID
      consumes:
        - multipart/form-data
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 5f8d04b3ab34567890abcdef
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Bar Actualizado"
                address:
                  type: string
                  example: "Nueva Dirección 456"
                phonenumber:
                  type: string
                  example: "+34 600 789 012"
                rating:
                  type: number
                  example: 4.8
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Bar actualizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bar actualizado exitosamente"
                  bar:
                    $ref: '#/components/schemas/Bar'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags: [Bars]
      summary: Eliminar bar por ID
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          example: 5f8d04b3ab34567890abcdef
      responses:
        '200':
          description: Bar eliminado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Bar eliminado exitosamente"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # Menu Management Endpoints
  /api/bars/{barId}/menu:
    post:
      tags: [Items]
      summary: Create a new menu item
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                price:
                  type: number
                itemType:
                  type: string
                  enum: [food, drink]
                image:
                  type: string
                  format: binary
                isVegetarian:
                  type: boolean
                calories:
                  type: number
                category:
                  type: string
                isAlcoholic:
                  type: boolean
                alcoholPercentage:
                  type: number
                volume:
                  type: number
                servingTemperature:
                  type: string
                  enum: [frio, ambiente, caliente]
      responses:
        '201':
          description: Item created successfully

  /api/bars/{barId}/alcoholic-drinks:
    get:
      tags: [Items]
      summary: Get alcoholic drinks for a bar
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Alcoholic drinks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DrinkItem'

  /api/bars/{barId}/food:
    get:
      tags: [Items]
      summary: Get food items for a bar
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Food items retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FoodItem'

  /api/bars/{barId}/drinks:
    get:
      tags: [Items]
      summary: Get non-alcoholic drinks for a bar
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Non-alcoholic drinks retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DrinkItem'

  # Menu Items Endpoints
  /api/menu/{itemId}:
    get:
      tags: [Items]
      summary: Get menu item by ID
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Menu item retrieved successfully
    put:
      tags: [Items]
      summary: Update menu item
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Menu item updated successfully
    delete:
      tags: [Items]
      summary: Delete menu item
      parameters:
        - in: path
          name: itemId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Menu item deleted successfully

  /api/bars/{barId}/menu/search:
    get:
      tags: [Items]
      summary: Buscar ítems en el menú
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
        - in: query
          name: q
          schema:
            type: string
          description: Término de búsqueda
        - in: query
          name: type
          schema:
            type: string
            enum: [food, drink]
        - in: query
          name: minPrice
          schema:
            type: number
        - in: query
          name: maxPrice
          schema:
            type: number
      responses:
        '200':
          description: Resultados de búsqueda
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  count:
                    type: integer
                  data:
                    type: array
                    items:
                      oneOf:
                        - $ref: '#/components/schemas/FoodItem'
                        - $ref: '#/components/schemas/DrinkItem'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  # Reviews Endpoints
  /api/reviews:
    post:
      tags: [Reviews]
      summary: Crear nueva reseña
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                barId:
                  type: string
                  example: "5f8d04b3ab34567890abcdef"
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 4
                comment:
                  type: string
                  example: "Excelente ambiente y servicio"
              required:
                - token
                - barId
                - rating
                - comment
      responses:
        '201':
          description: Reseña creada exitosamente
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  review:
                    $ref: '#/components/schemas/Review'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/bars/{id}/reviews:
    get:
      tags: [Reviews]
      summary: Obtener reseñas de un bar
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: "5f8d04b3ab34567890abcdef"
      responses:
        '200':
          description: Lista de reseñas
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/users/reviews:
    get:
      tags: [Reviews]
      summary: Obtener reseñas del usuario actual
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Lista de reseñas del usuario
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Review'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/reviews/{id}:
    put:
      tags: [Reviews]
      summary: Actualizar reseña
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: "5f8d04b3ab34567890abcdef"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 5
                comment:
                  type: string
                  example: "Actualizado: Mejor experiencia"
              required:
                - token
      responses:
        '200':
          description: Reseña actualizada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  review:
                    $ref: '#/components/schemas/Review'
        '403':
          description: No autorizado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No puedes editar esta reseña"
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags: [Reviews]
      summary: Eliminar reseña
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: "5f8d04b3ab34567890abcdef"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Reseña eliminada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'


  #Comentarios endpoints
  /api/reviews/{id}/comments:
    post:
      tags: [Comments]
      summary: Crear comentario en una reseña
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                comment:
                  type: string
                  example: "Excelente reseña"
              required:
                - token
                - comment
      responses:
        '201':
          description: Comentario creado
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  comment:
                    $ref: '#/components/schemas/Comment'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    get:
      tags: [Comments]
      summary: Obtener comentarios de una reseña
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
      responses:
        '200':
          description: Lista de comentarios
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Comment'
        '404':
          description: Sin comentarios
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "No se encontraron comentarios"
        '500':
          $ref: '#/components/responses/ServerError'

  # Upvotes en Reviews
  /api/reviews/{id}/upvotes:
    post:
      tags: [Upvotes]
      summary: Toggle upvote en reseña
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: 5f8d04b3ab34567890abcdef
              required:
                - user_id
      responses:
        '201':
          description: Upvote agregado
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                  data:
                    $ref: '#/components/schemas/UpvoteReview'
        '200':
          description: Upvote removido
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                  message:
                    type: string
        '500':
          $ref: '#/components/responses/ServerError'

  /api/reviews/{id}/upvotes/count:
    get:
      tags: [Upvotes]
      summary: Conteo de upvotes en reseña
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
      responses:
        '200':
          description: Conteo obtenido
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 15
        '500':
          $ref: '#/components/responses/ServerError'

  # Operaciones CRUD para Reviews
  /api/reviews/{id}:
    put:
      tags: [Reviews]
      summary: Actualizar reseña
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                rating:
                  type: number
                  minimum: 1
                  maximum: 5
                  example: 5
                comment:
                  type: string
                  example: "Experiencia actualizada"
              required:
                - token
      responses:
        '200':
          description: Reseña actualizada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  review:
                    $ref: '#/components/schemas/Review'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

    delete:
      tags: [Reviews]
      summary: Eliminar reseña
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                  example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
      responses:
        '200':
          description: Reseña eliminada
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  #Upvotes endpoints
  /api/upvotes:
    post:
      tags: [Upvotes]
      summary: Toggle upvote para un bar
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                  example: 5f8d04b3ab34567890abcdef
                place_id:
                  type: string
                  example: 5f8d04b3ab34567890abcdef
              required:
                - user_id
                - place_id
      responses:
        '201':
          description: Upvote agregado
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                    example: true
                  data:
                    $ref: '#/components/schemas/Upvote'
        '200':
          description: Upvote removido
          content:
            application/json:
              schema:
                type: object
                properties:
                  liked:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Upvote removed"
        '500':
          $ref: '#/components/responses/ServerError'

  /api/upvotes/{place_id}/count:
    get:
      tags: [Upvotes]
      summary: Obtener conteo de upvotes de un bar
      parameters:
        - in: path
          name: place_id
          required: true
          schema:
            type: string
          example: 5f8d04b3ab34567890abcdef
      responses:
        '200':
          description: Conteo de upvotes
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 15
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'

  /api/bars/current:
    get:
      tags: [Bars]
      summary: Get current user's bar
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Current bar retrieved successfully
    put:
      tags: [Bars]
      summary: Update current bar
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Bar updated successfully

  /api/bars/current/image/{type}:
    put:
      tags: [Bars]
      summary: Update bar image
      parameters:
        - in: path
          name: type
          required: true
          schema:
            type: string
            enum: [profile, cover]
      security:
        - BearerAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
      responses:
        '200':
          description: Image updated successfully

  /api/promote-to-business:
    put:
      tags: [Users]
      summary: Promote user to business owner
      security:
        - BearerAuth: []

  /api/my-bars:
    get:
      tags: [Bars]
      summary: Get bars managed by current user
      security:
        - BearerAuth: []

  # Events Endpoints
  /api/events:
    get:
      tags: [Events]
      summary: Get all events
      parameters:
        - in: query
          name: range
          schema:
            type: string
            enum: [today, week, month]

  /api/bars/{barId}/new-event:
    post:
      tags: [Events]
      summary: Create new event for a bar
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string

  /api/bars/{barId}/events/{eventId}:
    put:
      tags: [Events]
      summary: Update an event
      security:
        - BearerAuth: []

    delete:
      tags: [Events]
      summary: Delete an event
      security:
        - BearerAuth: []

  # Business Endpoints
  /api/business/bar/{barId}/stats:
    get:
      tags: [Business]
      summary: Get bar statistics
      security:
        - BearerAuth: []

  /api/business/bar/{barId}/photos:
    post:
      tags: [Business]
      summary: Upload bar photos
      security:
        - BearerAuth: []

  /api/business/bar/{barId}/photos/{photoId}:
    delete:
      tags: [Business]
      summary: Delete bar photo
      security:
        - BearerAuth: []

  # User Management
  /api/users:
    get:
      tags: [Users]
      summary: Get all users
      responses:
        '200':
          description: Users retrieved successfully

  /api/register:
    post:
      tags: [Users]
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDetail'
      responses:
        '201':
          description: User registered successfully

  /api/login:
    post:
      tags: [Users]
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: Login successful

  # Additional Bar Management Endpoints
  /api/create-bar:
    post:
      tags: [Bars]
      summary: Create a new bar
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
                address:
                  type: string
                city:
                  type: string
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Bar created successfully

  /api/my-bars:
    get:
      tags: [Bars]
      summary: Get bars managed by current user
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Managed bars retrieved successfully

  /api/update-bar/{barId}:
    put:
      tags: [Bars]
      summary: Update a bar
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bar updated successfully

  /api/delete-bar/{barId}:
    delete:
      tags: [Bars]
      summary: Delete a bar
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bar deleted successfully

  /api/bar-stats/{barId}:
    get:
      tags: [Business]
      summary: Get bar statistics
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Bar statistics retrieved successfully

  # Additional Review Management
  /api/reviews/{reviewId}:
    put:
      tags: [Reviews]
      summary: Update a review
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review updated successfully
    delete:
      tags: [Reviews]
      summary: Delete a review
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: reviewId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Review deleted successfully

  # Favorites Endpoints
  /api/users/{userId}/favorites/{barId}:
    post:
      tags: [Users]
      summary: Add/Remove bar from favorites
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
        - in: path
          name: barId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Favorite status updated successfully

  /api/users/{userId}/favorites:
    get:
      tags: [Users]
      summary: Get user's favorite bars
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      responses:
        '200':
          description: List of favorite bars retrieved successfully

  # Additional Events Endpoints
  /api/bars/{barId}/events:
    get:
      tags: [Events]
      summary: Get events for a specific bar
      parameters:
        - in: path
          name: barId
          required: true
          schema:
            type: string
        - in: query
          name: range
          schema:
            type: string
            enum: [today, week, month, all]
      responses:
        '200':
          description: Events retrieved successfully

  # Additional Upvotes Endpoints
  /api/upvotes:
    post:
      tags: [Upvotes]
      summary: Toggle upvote for a bar
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: string
                place_id:
                  type: string
              required:
                - user_id
                - place_id
      responses:
        '200':
          description: Upvote toggled successfully

  /api/upvotes/{place_id}/count:
    get:
      tags: [Upvotes]
      summary: Get upvote count for a bar
      parameters:
        - in: path
          name: place_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Upvote count retrieved successfully

components:
  responses:
    Forbidden:
      description: Acceso no autorizado
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Acceso prohibido"

    ServerError:
      description: Error interno del servidor
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"

    BadRequest:
      description: Solicitud incorrecta
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Bad request"

    NotFound:
      description: Recurso no encontrado
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Resource not found"


  # Mantener los schemas existentes
  schemas:
    Bar:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
          required: true
        description:
          type: string
        profileImage:
          type: string
        coverImage:
          type: string
        address:
          type: string
          required: true
        city:
          type: string
          required: true
        phone:
          type: string
        email:
          type: string
        website:
          type: string
        openingHours:
          type: object
          properties:
            monday:
              $ref: '#/components/schemas/DaySchedule'
            tuesday:
              $ref: '#/components/schemas/DaySchedule'
            wednesday:
              $ref: '#/components/schemas/DaySchedule'
            thursday:
              $ref: '#/components/schemas/DaySchedule'
            friday:
              $ref: '#/components/schemas/DaySchedule'
            saturday:
              $ref: '#/components/schemas/DaySchedule'
            sunday:
              $ref: '#/components/schemas/DaySchedule'
        priceRange:
          type: string
          enum: [low, medium, high, luxury]
          default: medium
        category:
          type: string
          enum: [bar, pub, cocktail_bar, sports_bar, lounge, nightclub, restaurant_bar]
          default: bar
        specialties:
          type: array
          items:
            type: string
        images:
          type: array
          items:
            type: string
        owner:
          type: string
          format: objectId
          description: Reference to UserDetail
        isActive:
          type: boolean
          default: true
        averageRating:
          type: number
          minimum: 0
          maximum: 5
          default: 0
        reviewCount:
          type: number
          default: 0
        viewCount:
          type: number
          default: 0
        location:
          type: object
          properties:
            type:
              type: string
              enum: [Point]
              default: Point
            coordinates:
              type: array
              items:
                type: number
              minItems: 2
              maxItems: 2
        amenities:
          type: array
          items:
            type: string
            enum: [wifi, parking, outdoor_seating, live_music, karaoke, pool_table, darts, sports_tv, food_service, happy_hour, vip_area, accessibility, smoking_area, dance_floor]

    BaseItem:
      type: object
      properties:
        _id:
          type: string
        bar:
          type: string
          format: objectId
          required: true
        name:
          type: string
          required: true
        description:
          type: string
          required: true
        price:
          type: number
          minimum: 0
          required: true
        image:
          type: string
        isAvailable:
          type: boolean
          default: true
        createdBy:
          type: string
          format: objectId
          required: true
          description: Reference to UserDetail
        itemType:
          type: string
          enum: [FoodItem, DrinkItem]
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - bar
        - name
        - description
        - price
        - createdBy

    DrinkItem:
      allOf:
        - $ref: "#/components/schemas/BaseItem"
        - type: object
          properties:
            isAlcoholic:
              type: boolean
              example: true
            alcoholPercentage:
              type: number
              minimum: 0
              maximum: 100
              example: 5.5
            volume:
              type: number
              minimum: 0
              example: 330
            category:
              type: string
              enum:
                [
                  cerveza,
                  vino,
                  coctel,
                  licor,
                  refresco,
                  agua,
                  jugo,
                  cafe,
                  te,
                  energetica,
                ]
              example: cerveza
            servingTemperature:
              type: string
              enum: [frio, ambiente, caliente]
              example: frio
          required:
            - isAlcoholic
            - volume
            - category

    FoodItem:
      allOf:
        - $ref: "#/components/schemas/BaseItem"
        - type: object
          properties:
            isVegetarian:
              type: boolean
              example: false
            hasGluten:
              type: boolean
              example: true
            calories:
              type: number
              minimum: 0
              example: 450
            category:
              type: string
              enum: [entrada, plato_principal, postre, ensalada, guarnicion]
              example: plato_principal
          required:
            - category

    Review:
      type: object
      properties:
        _id:
          type: string
          example: 5f8d04b3ab34567890abcdef
        user:
          $ref: "#/components/schemas/UserDetail"
        bar:
          $ref: "#/components/schemas/Bar"
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4
        comment:
          type: string
          example: "Excelente ambiente y servicio"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user
        - bar
        - rating
        - comment

    Comment:
      type: object
      properties:
        _id:
          type: string
          example: 5f8d04b3ab34567890abcdef
        user:
          $ref: "#/components/schemas/UserDetail"
        review:
          $ref: "#/components/schemas/Review"
        comment:
          type: string
          example: "Estoy de acuerdo con la reseña"
        createdAt:
          type: string
          format: date-time
      required:
        - user
        - review
        - comment

    Upvote:
      type: object
      properties:
        _id:
          type: string
          example: 5f8d04b3ab34567890abcdef
        user_id:
          $ref: "#/components/schemas/UserDetail"
        bar_id:
          $ref: "#/components/schemas/Bar"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user_id
        - bar_id

    UpvoteReview:
      type: object
      properties:
        _id:
          type: string
          example: 5f8d04b3ab34567890abcdef
        user_id:
          $ref: "#/components/schemas/UserDetail"
        review_id:
          $ref: "#/components/schemas/Review"
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
      required:
        - user_id
        - review_id

    UserDetail:
      type: object
      properties:
        _id:
          type: string
        name:
          type: string
        email:
          type: string
        mobile:
          type: string
        password:
          type: string
        image:
          type: string
        gender:
          type: string
        accountType:
          type: string
        enum: [user, business, admin]
        default: user
        favorites:
          type: array
          items:
            type: string
            format: objectId
        managedBars:
          type: array
          items:
            type: string
            format: objectId
        permissions:
          type: object
          properties:
            canCreateBars:
              type: boolean
            canManageAllBars:
              type: boolean
            canManageUsers:
              type: boolean
            canManageMenu:
              type: boolean
            canManageEvents:
              type: boolean
            canManagePhotos:
              type: boolean
        businessInfo:
          type: object
          properties:
            businessName:
              type: string
            businessDescription:
              type: string
            businessLicense:
              type: string
            verificationStatus:
              type: string
            enum: [pending, verified, rejected]
            default: pending
            verificationDate:
              type: string
              format: date-time
      required:
        - name
        - email
        - password

    DaySchedule:
      type: object
      properties:
        open:
          type: string
        close:
          type: string
        closed:
          type: boolean
          default: false

    Event:
      type: object
      properties:
        _id:
          type: string
        bar:
          type: string
          format: objectId
          required: true
        title:
          type: string
          required: true
        description:
          type: string
          required: true
        location:
          type: string
        date:
          type: string
          format: date-time
          required: true
        image:
          type: string
        createdAt:
          type: string
          format: date-time
      required:
        - bar
        - title
        - description
        - date

  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  # Paths para Bars
  /bars:
    get:
      tags: [Bars]
      summary: Obtener todos los bares
      responses:
        "200":
          description: Lista de bares
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Bar"
    post:
      tags: [Bars]
      summary: Crear un nuevo bar
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Bar"
      responses:
        "201":
          description: Bar creado exitosamente

  # Paths para Items
  /items:
    get:
      tags: [Items]
      summary: Obtener todos los items
      responses:
        "200":
          description: Lista de items
          content:
            application/json:
              schema:
                type: array
                items:
                  oneOf:
                    - $ref: "#/components/schemas/DrinkItem"
                    - $ref: "#/components/schemas/FoodItem"

  # Paths para Reviews
  /reviews:
    post:
      tags: [Reviews]
      summary: Crear una nueva reseña
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Review"
      responses:
        "201":
          description: Reseña creada exitosamente

  # Paths para Users
  /users/register:
    post:
      tags: [Users]
      summary: Registrar nuevo usuario
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDetail"
      responses:
        "201":
          description: Usuario registrado exitosamente

  /users/login:
    post:
      tags: [Users]
      summary: Iniciar sesión
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                password:
                  type: stringF
              required:
                - email
                - password
      responses:
        "200":
          description: Login exitoso
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
    
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT